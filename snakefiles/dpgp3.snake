#!python3

# ----- Definitions ----- #

CHROMS = ['Chr' + c for c in ['2L', '2R', '3L', '3R']]
CHROM_LENGTHS = {'Chr2L':23011544,
                'Chr2R':21146708,
                'Chr3L':24543557,
                'Chr3R':27905053}

# The Starting and Ending locus positions (in 100KB) for fastNeutrino
# This focuses on the central region of each chromosome arm.
LOCUS_START = {'Chr2L':10,
                'Chr2R':60,
                'Chr3L':10,
                'Chr3R':100}
LOCUS_END = {'Chr2L':170,
                'Chr2R':190,
                'Chr3L':170,
                'Chr3R':260}

# Path to where the data is stored.
DATA_PATH = "data/DPGP3/"

# ------  Rules ----- #

'''
    Untar the consensus sequence archive.
'''
rule untar_dpgp3:
    input:
        DATA_PATH + "dpgp3_sequences.tar.bz2"
    output:
        expand(DATA_PATH + "dpgp3_{CHROM}.tar", CHROM=CHROMS)
    shell:
        "tar -xjf {input} -C " + DATA_PATH

'''
    Combine the consensus sequences into a single file for one chromosome
'''
rule align_dpgp3:
    input:
        DATA_PATH + "dpgp3_{chrom}.tar",
        DATA_PATH + "inversions/noninverted_{chrom}.txt"
    output:
        DATA_PATH + "{chrom}.alignment.txt.gz"
    shell:
        "python src/merge_seq.py {input} {{}}_{wildcards.chrom}.seq "
        "| gzip -c > {output}"

'''
    Combine the consensus sequences into a single file for all chromosomes
'''
rule align_dpgp3_all:
    input:
        expand(DATA_PATH + "{CHROM}.alignment.txt.gz", CHROM=CHROMS)

'''
    Subsample, get minor allele counts and number observed for each site
'''
rule get_mac:
    input:
        DATA_PATH + "{chrom}.alignment.txt.gz"
    output:
        DATA_PATH + "minor_allele_counts/{chrom}.mac.txt.gz"
    shell:
        "gunzip -c < {input} | python src/alignment2mac.py 100 "
        "| gzip -c > {output}"

rule get_mac_all:
    input:
        expand(DATA_PATH + "minor_allele_counts/{CHROM}.mac.txt.gz", CHROM=CHROMS)

'''
    Convert minor allele counts to downsampled SFS for fastNeutrino.
    Downsample to 90 samples. Use a window size of 100Kb.
'''
rule mac2fastNeutrino:
    input:
        "data/DPGP3/minor_allele_counts/{chrom}.mac.txt.gz",
        "data/dmel-4Dsites.txt.gz"
    output:
        "data/DPGP3/windowed_sfs/{chrom}.sfs.txt"
    params:
        chr_len = lambda wildcards: CHROM_LENGTHS[wildcards.chrom]
    shell:
        '''
        python src/mac2sfs.py \
            {wildcards.chrom} {params.chr_len} 100000 90 {input} > {output}
        '''

rule mac2fastNeutrino_all:
    input:
        expand("data/DPGP3/windowed_sfs/{CHROM}.sfs.txt", CHROM=CHROMS)


'''
    Run fastNeutrino on DPGP windowed SFS.
'''
rule fastNeutrino:
    input:
        datafile="data/DPGP3/windowed_sfs/{chrom}.sfs.txt",
        modelfile="fastNeutrino/models/{model}.txt"
    output:
        "fastNeutrino/fitted_params/{chrom}.{model}.txt"
    params:
        start = lambda wildcards: LOCUS_START[wildcards.chrom],
        end = lambda wildcards: LOCUS_END[wildcards.chrom]
    shell:
        "fastNeutrino --foldSpectrum --maxB 30 --maxRandomRestarts 100 "
        "--locusStartIdx {params.start} "
        "--locusEndIdx {params.end} "
        "--modelFile {input.modelfile} "
        "--inferredModelOutputFile {output} "
        "< {input.datafile} "
        "> fastNeutrino/log/{wildcards.chrom}.{wildcards.model}.log"

# Note: only 2EpochConst used in the paper.
MODELS=['2EpochConst',
        '2EpochExp',
        '3EpochConstConst',
        '3EpochConstExp',
        '3EpochExpConst',
        '3EpochExpExp']

rule fastNeutrino_all:
    input:
        expand("fastNeutrino/fitted_params/{CHROM}.{MODEL}.txt",
            CHROM=CHROMS,
            MODEL=MODELS)
