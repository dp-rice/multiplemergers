import numpy as np

### SLiM ###
FSEL = np.insert(np.logspace(-6, -3, 4), 0, 0)
sim_sample_size = 100
SUBSAMPLE_SIZES = [100, 4]
L = int(1e8)
w = 1000

rule merge_correlations_all:
    input:
        expand("simulations/slim/sweeps_n-{n}_fsel-{fsel}_corrmerged.txt.gz", fsel=FSEL, n=SUBSAMPLE_SIZES),

rule merge_correlations:
    output:
        "simulations/slim/{typ}_n-{n}_fsel-{fsel}_corrmerged.txt.gz"
    input:
        expand("simulations/slim/scratch/{{typ}}_n-{{n}}_fsel-{{fsel}}_rep-{rep}.corr.txt.gz", rep=np.arange(100))
    shell:
        "python src/merge_corr.py {wildcards.n} {L} {w} {input} | gzip -c > {output}"

rule correlations:
    input:
        "simulations/slim/scratch/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.wsfs.txt.gz"
    output:
        temp("simulations/slim/scratch/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.corr.txt.gz")
    shell:
        "python src/alleles2correlations.py {input} {wildcards.n} {L} {w} | gzip -c > {output}"

rule parse_slim:
    input:
        "simulations/slim/sampled/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.txt"
    output:
        temp("simulations/slim/scratch/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.wsfs.txt.gz")
    shell:
        "python src/parse_slim.py {input} {L} {w} {output}"

rule subsample_slim:
    input:
        "simulations/slim/raw/{typ}_fsel-{fsel}_rep-{rep}.txt"
    output:
        "simulations/slim/sampled/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.txt"
    shell:
        "python src/subsample_slim_output.py {sim_sample_size} {wildcards.n} < {input} > {output}"

rule slim:
    output:
        "simulations/slim/raw/{typ}_fsel-{fsel}_rep-{rep}.txt"
    wildcard_constraints:
        typ="\[a-z]+"
    shell:
        "slim -d fsel={wildcards.fsel} src/slim/{wildcards.typ}.slim > {output}"

### MSPRIME ###
SAMPLE_SIZES = [100, 4]
RS = np.insert(np.logspace(-1, 3, 13), 0, 0.0)
ALPHAS = [1.25, 1.5, 1.75, 2.0]
GS = [0.01, 0.1, 1.0, 2.0, 4.0, 8.0]
TS = [0.01, 0.1, 1.0]
SS = [0.2, 0.1, 0.05, 0.01]

rule growth_all:
    input:
        expand("simulations/msprime/jsfs_n-{n}_a-{alpha}_r-{r}.txt", n=SAMPLE_SIZES, alpha=ALPHAS, r=RS[:-3]),
        expand("simulations/msprime/jsfs_n-{n}_g-{g}_r-{r}.txt", n=SAMPLE_SIZES, g=GS, r=RS),
        expand("simulations/msprime/jsfs_n-{n}_T-{T}_S-{S}_r-{r}.txt", n=SAMPLE_SIZES, T=TS, S=SS, r=RS)

rule fastNeutrino2msprime_all:
    input:
        expand("simulations/msprime/jsfs_fastNeutrino_n-{n}_{CHROM}_3EpochConstConst_r-{r}.txt",
                n=SAMPLE_SIZES, r=RS, CHROM=CHROMS)

rule constant_rate:
    output:
        "simulations/msprime/jsfs_n-{n}_a-{alpha}_r-{r}.txt"
    wildcard_constraints:
        r="\d+\.\d*"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "--alpha {wildcards.alpha} -r {wildcards.r} > {output}"

rule exponential_growth:
    output:
        "simulations/msprime/jsfs_n-{n}_g-{g}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "-G {wildcards.g} -r {wildcards.r} > {output}"

rule step_growth:
    output:
        "simulations/msprime/jsfs_n-{n}_T-{T}_S-{S}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "-T {wildcards.T} -S {wildcards.S} -r {wildcards.r} > {output}"

rule fastNeutrino2msprime:
    output:
        "simulations/msprime/jsfs_fastNeutrino_n-{n}_{chrom}_{model}_r-{r}.txt"
    input:
        "fastNeutrino/fitted_params/{chrom}.{model}.txt"
    shell:
        "python src/simulate_joint_sfs.py "
        "$(python src/fastNeutrino2params.py {input}) "
        "--nSamples {wildcards.n} --nLoci 100000 "
        "-r {wildcards.r} "
        "> {output}"
