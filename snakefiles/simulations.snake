import numpy as np

ruleorder: msprime_like_slim > slim

# msprime params
SAMPLE_SIZES = [4, 100]
RS = np.insert(np.logspace(-1, 3, 13), 0, 0.0)
ALPHAS = [1.25, 1.5, 1.75, 2.0]
GS = [0.01, 0.1, 1.0, 2.0, 4.0, 8.0]
TS = [0.01, 0.1, 1.0]
SS = [0.2, 0.1, 0.05, 0.01]
# Migration
MS = np.logspace(-1, 1, 5)


# SLiM params
FBGSEL = np.logspace(-2, 0, 3)
FSEL = np.insert(np.logspace(-6, -3, 4), 0, 0)

### SLiM ###
sim_sample_size = 100
SUBSAMPLE_SIZES = [100, 4]
L = int(1e8)
w = 1000

rule merge_correlations_all:
    input:
        expand("simulations/slim/sweeps_n-{n}_fsel-{fsel}_corrmerged.txt.gz", fsel=FSEL, n=SUBSAMPLE_SIZES),
        expand("simulations/slim/bgsel_n-{n}_fsel-{fsel}_corrmerged.txt.gz", fsel=FBGSEL, n=SUBSAMPLE_SIZES)

rule merge_correlations:
    output:
        "simulations/slim/{typ}_n-{n}_fsel-{fsel}_corrmerged.txt.gz"
    input:
        expand("simulations/slim/{{typ}}_n-{{n}}_fsel-{{fsel}}_rep-{rep}.corr.txt.gz", rep=np.arange(100))
    shell:
        "python src/merge_corr.py {wildcards.n} {L} {w} {input} | gzip -c > {output}"

rule correlations:
    input:
        "simulations/slim/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.wsfs.txt.gz"
    output:
        temp("simulations/slim/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.corr.txt.gz")
    shell:
        "python src/alleles2correlations.py {input} {wildcards.n} {L} {w} | gzip -c > {output}"

rule parse_slim:
    input:
        "simulations/slim/sampled/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.txt"
    output:
        temp("simulations/slim/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.wsfs.txt.gz")
    shell:
        "python src/parse_slim.py {input} {L} {w} {output}"

rule subsample_slim:
    input:
        "simulations/slim/raw/{typ}_fsel-{fsel}_rep-{rep}.txt"
    output:
        "simulations/slim/sampled/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.txt"
    shell:
        "python src/subsample_slim_output.py {sim_sample_size} {wildcards.n} < {input} > {output}"
        
rule slim:
    output:
        "simulations/slim/raw/{typ}_fsel-{fsel}_rep-{rep}.txt"
    wildcard_constraints:
        typ="\[a-z]+"
    shell:
        "slim -d fsel={wildcards.fsel} src/slim/{wildcards.typ}.slim > {output}"

### MSPRIME ###
rule msprime_like_slim:
    output:
        "simulations/slim/msprime_fsel-0.0_rep-{rep}.txt"
    shell:
        "python src/msprime_like_slim.py > {output}"

rule growth_all:
    input:
        expand("simulations/msprime/jsfs_n-{n}_a-{alpha}_r-{r}.txt", n=SAMPLE_SIZES, alpha=ALPHAS, r=RS[:-3]),
        expand("simulations/msprime/jsfs_n-{n}_g-{g}_r-{r}.txt", n=SAMPLE_SIZES, g=GS, r=RS),
        expand("simulations/msprime/jsfs_n-{n}_T-{T}_S-{S}_r-{r}.txt", n=SAMPLE_SIZES, T=TS, S=SS, r=RS)

rule two_deme_all:
    input:
        expand("simulations/msprime/jsfs_n-{n}_d-2_M-{M}_r-{r}.txt", n=SAMPLE_SIZES, r=RS[:-2], M=MS[2:]),
        expand("simulations/msprime/jsfs_n-{n}_d-2_M-{M}_r-{r}.txt", n=SAMPLE_SIZES, r=RS[:-1]/10, M=MS[:2])

rule steppingstone_all:
    input:
        expand("simulations/msprime/jsfs_steppingstone_n-50_d-50_M-{M}_r-{r}.txt", r=RS[:-2]/100, M=MS[2:]),
        expand("simulations/msprime/jsfs_steppingstone_n-50_d-50_M-{M}_r-{r}.txt", r=RS[:-1]/1000, M=MS[:2])

rule constant_rate:
    output:
        "simulations/msprime/jsfs_n-{n}_a-{alpha}_r-{r}.txt"
    wildcard_constraints:
        r="\d+\.\d*"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "--alpha {wildcards.alpha} -r {wildcards.r} > {output}"

rule exponential_growth:
    output:
        "simulations/msprime/jsfs_n-{n}_g-{g}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "-G {wildcards.g} -r {wildcards.r} > {output}"

rule step_growth:
    output:
        "simulations/msprime/jsfs_n-{n}_T-{T}_S-{S}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "-T {wildcards.T} -S {wildcards.S} -r {wildcards.r} > {output}"

rule two_deme:
    output:
        "simulations/msprime/jsfs_n-{n}_d-2_M-{M}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "-d 2 -M {wildcards.M} -r {wildcards.r} > {output}"

rule steppingstone:
    output:
        "simulations/msprime/jsfs_steppingstone_n-{n}_d-{dstep}_M-{M}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "--migration_type steppingstone -d {wildcards.dstep} -M {wildcards.M} -r {wildcards.r} > {output}"




### OLD ###
'''
rule unlinked_loci_bsc:
    output:
        "simulations/jsfs_a-1.01_unlinked.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples 100 --nLoci 100000 "
        "--alpha 1.01 --unlinked > {output}"

rule unlinked_loci:
    output:
        "simulations/jsfs_a-2.0_unlinked_rep-{rep}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples 100 --nLoci 100000 "
        "--alpha 2.0 --unlinked > {output}"

rule unlinked_loci_all:
    input:
        expand("simulations/jsfs_a-2.0_unlinked_rep-{rep}.txt", rep=np.arange(100)) 

rule constant_rate_short:
    output:
        "simulations/jsfs_a-{alpha}_r-{r}_rep-{rep}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples 100 --nLoci 10000 "
        "--alpha {wildcards.alpha} -r {wildcards.r} > {output}"

rule alpha1:
    input:
        expand("simulations/jsfs_a-1.01_r-{r}_rep-{rep}.txt", r=RS, rep=np.arange(10))

rule constant_rate_all:
    input:
        expand("simulations/jsfs_a-{alpha}_r-{r}.txt", alpha=ALPHAS, r=RS)
'''

'''
rule exponential_growth:
    output:
        "simulations/jsfs_g-{g}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples 100 --nLoci 100000 "
        "-G {wildcards.g} -r {wildcards.r} > {output}"

rule exponential_growth_all:
    input:
        expand("simulations/jsfs_g-{g}_r-{r}.txt", g=GS, r=RS)

rule step_growth:
    output:
        "simulations/jsfs_T-{T}_S-{S}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples 100 --nLoci 100000 "
        "-T {wildcards.T} -S {wildcards.S} -r {wildcards.r} > {output}"

rule step_growth_all:
    input:
        expand("simulations/jsfs_T-{T}_S-{S}_r-{r}.txt", r=RS, T=TS, S=SS)
'''

'''
rule two_deme:
    output:
        "simulations/jsfs_d-2_M-{M}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples 100 --nLoci 100000 "
        "-d 2 -M {wildcards.M} -r {wildcards.r} > {output}"

rule two_deme_all:
    input:
        expand("simulations/jsfs_d-2_M-{M}_r-{r}.txt", r=RS[:-2], M=MS[2:]),
        expand("simulations/jsfs_d-2_M-{M}_r-{r}.txt", r=RS[:-1]/10, M=MS[:2])
'''

'''
rule steppingstone:
    output:
        "simulations/jsfs_steppingstone_d-{dstep}_M-{M}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples 100 --nLoci 100000 "
        "--migration_type steppingstone -d {wildcards.dstep} -M {wildcards.M} -r {wildcards.r} > {output}"

rule steppingstone_all:
    input:
        expand("simulations/jsfs_steppingstone_d-100_M-{M}_r-{r}.txt", r=RS[:-2]/100, M=MS[2:]),
        expand("simulations/jsfs_steppingstone_d-100_M-{M}_r-{r}.txt", r=RS[:-1]/1000, M=MS[:2])
'''
