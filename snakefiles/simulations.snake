#!python3

import numpy as np

### Simulate Dmel data

remote_dir = '/project/jnovembre/dpr/mmc_genomics/simulations/'

rule simulate_dmel_all:
    input:
        expand(remote_dir + "msprime/branch_lengths-{rep}.npz", rep=range(20)),
        expand(remote_dir + "msprime/branch_lengths_dmel-{rep}.npz",
               rep=range(50)),
        expand(remote_dir + "msprime/branch_lengths_xibeta-{rep}.npz",
               rep=range(50))


rule simulate_dmel_constant:
    output:
        remote_dir + "msprime/branch_lengths-{rep}.npz"
    shell:
        """
        PATH="/home/dpr/miniconda3/envs/multiplemergers/bin:/home/dpr/miniconda3/condabin:"$PATH
        python src/simulate_dmel_chrom.py {output} 0.067 constant {wildcards.rep}
        """

rule simulate_dmel_demo:
    output:
        remote_dir + "msprime/branch_lengths_dmel-{rep}.npz"
    shell:
        """
        PATH="/home/dpr/miniconda3/envs/multiplemergers/bin:/home/dpr/miniconda3/condabin:"$PATH
        python src/simulate_dmel_chrom.py {output} 0.067 dmel {wildcards.rep}
        """

rule simulate_dmel_xibeta:
    output:
        remote_dir + "msprime/branch_lengths_xibeta-{rep}.npz"
    shell:
        """
        PATH="/home/dpr/miniconda3/envs/multiplemergers/bin:/home/dpr/miniconda3/condabin:"$PATH
        python src/simulate_dmel_chrom.py {output} 0.067 xi-beta {wildcards.rep}
        """

rule simulate_dmel_short:
    output:
        remote_dir + "msprime/branch_lengths-short.npz"
    shell:
        """
        PATH="/home/dpr/miniconda3/envs/multiplemergers/bin:/home/dpr/miniconda3/condabin:"$PATH
        python src/simulate_dmel_chrom.py {output} 100000 0.067 0
        """
### SLiM ###
# Fraction of sites under selection
FSEL = np.insert(np.logspace(-6, -3, 4), 0, 0)
sim_sample_size = 100
SUBSAMPLE_SIZES = [100, 4]
# Length of genome
L = int(1e8)
# Window size for coarse-graining
w = 1000


'''
Calculate the 2-site SFS from SLiM output.
'''
rule merge_correlations_all:
    input:
        expand("simulations/slim/sweeps_n-{n}_fsel-{fsel}_corrmerged.txt.gz", fsel=FSEL, n=SUBSAMPLE_SIZES),

rule merge_correlations:
    output:
        "simulations/slim/{typ}_n-{n}_fsel-{fsel}_corrmerged.txt.gz"
    input:
        expand("simulations/slim/scratch/{{typ}}_n-{{n}}_fsel-{{fsel}}_rep-{rep}.corr.txt.gz", rep=np.arange(100))
    shell:
        "python src/merge_corr.py {wildcards.n} {L} {w} {input} | gzip -c > {output}"

rule correlations:
    input:
        "simulations/slim/scratch/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.wsfs.txt.gz"
    output:
        temp("simulations/slim/scratch/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.corr.txt.gz")
    shell:
        "python src/alleles2correlations.py {input} {wildcards.n} {L} {w} | gzip -c > {output}"

rule parse_slim:
    input:
        "simulations/slim/sampled/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.txt"
    output:
        temp("simulations/slim/scratch/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.wsfs.txt.gz")
    shell:
        "python src/parse_slim.py {input} {L} {w} {output}"

'''
Subsample SLiM output to a smaller sample size.
'''
rule subsample_slim:
    input:
        "simulations/slim/raw/{typ}_fsel-{fsel}_rep-{rep}.txt"
    output:
        "simulations/slim/sampled/{typ}_n-{n}_fsel-{fsel}_rep-{rep}.txt"
    shell:
        "python src/subsample_slim_output.py {sim_sample_size} {wildcards.n} < {input} > {output}"

'''
Run SLiM simulations.
'''
rule slim:
    output:
        "simulations/slim/raw/{typ}_fsel-{fsel}_rep-{rep}.txt"
    wildcard_constraints:
        typ="\[a-z]+"
    shell:
        "slim -d fsel={wildcards.fsel} src/slim/{wildcards.typ}.slim > {output}"

### MSPRIME ###
SAMPLE_SIZES = [100, 4]
# Recombination rates
RS = np.insert(np.logspace(-1, 3, 13), 0, 0.0)
# Beta-coalescent parameters
ALPHAS = [1.25, 1.5, 1.75, 2.0]
# Exponential rowth rates
GS = [0.01, 0.1, 1.0, 2.0, 4.0, 8.0]
# Two-epoch growth times
TS = [0.01, 0.1, 1.0]
# Two-epoch inverse growth factors
SS = [0.2, 0.1, 0.05, 0.01]


'''
    Run msprime simulations of coalescent models, saving the two-site SFS.
'''
rule msprime_all:
    input:
        expand("simulations/msprime/jsfs_n-{n}_a-{alpha}_r-{r}.txt", n=SAMPLE_SIZES, alpha=ALPHAS, r=RS[:-3]),
        expand("simulations/msprime/jsfs_n-{n}_xibeta-{alpha}_r-{r}.txt", n=SAMPLE_SIZES, alpha=ALPHAS, r=RS[:-3]),
        expand("simulations/msprime/jsfs_n-{n}_g-{g}_r-{r}.txt", n=SAMPLE_SIZES, g=GS, r=RS),
        expand("simulations/msprime/jsfs_n-{n}_T-{T}_S-{S}_r-{r}.txt", n=SAMPLE_SIZES, T=TS, S=SS, r=RS)

'''
    Run msprime simulations of fastNeutrino-fitted models, saving the two-site SFS.
'''
CHROMS = ['Chr' + c for c in ['2L', '2R', '3L', '3R']]

rule fastNeutrino2msprime_all:
    input:
        expand("simulations/msprime/jsfs_fastNeutrino_n-{n}_{CHROM}_3EpochConstConst_r-{r}.txt",
                n=SAMPLE_SIZES, r=RS, CHROM=CHROMS)

'''
    Run beta coalescent simulations.
'''
rule beta_coalescent:
    output:
        "simulations/msprime/jsfs_n-{n}_a-{alpha}_r-{r}.txt"
    wildcard_constraints:
        r="\d+\.\d*"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "--alpha {wildcards.alpha} -r {wildcards.r} > {output}"

'''
    Run xi-beta coalescent simulations.
'''
rule xibeta_coalescent:
    output:
        "simulations/msprime/jsfs_n-{n}_xibeta-{alpha}_r-{r}.txt"
    wildcard_constraints:
        r="\d+\.\d*"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "--xibeta {wildcards.alpha} -r {wildcards.r} > {output}"

'''
    Run exponential growth simulations.
'''
rule exponential_growth:
    output:
        "simulations/msprime/jsfs_n-{n}_g-{g}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "-G {wildcards.g} -r {wildcards.r} > {output}"
'''
    Run two-epoch growth simulations.
'''
rule step_growth:
    output:
        "simulations/msprime/jsfs_n-{n}_T-{T}_S-{S}_r-{r}.txt"
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "-T {wildcards.T} -S {wildcards.S} -r {wildcards.r} > {output}"

'''
    Run msprime with fastNeutrino-fitted parameters.
'''
rule fastNeutrino2msprime:
    output:
        "simulations/msprime/jsfs_fastNeutrino_n-{n}_{chrom}_{model}_r-{r}.txt"
    input:
        "fastNeutrino/fitted_params/{chrom}.{model}.txt"
    shell:
        "python src/simulate_joint_sfs.py "
        "$(python src/fastNeutrino2params.py {input}) "
        "--nSamples {wildcards.n} --nLoci 100000 "
        "-r {wildcards.r} "
        "> {output}"

'''
    Fit demographic model to xibeta coalescent.
'''
rule jsfs2fastNeutrino:
    input:
        "simulations/msprime/jsfs_n-100_xibeta-{alpha}_r-0.0.txt",
    output:
        "fastNeutrino/input/fn_n-100_xibeta-{alpha}_r-0.0.txt"
    shell:
        "python src/jsfs2fastNeutrino.py < {input} > {output}"


fastNeutrino = "/Users/danielrice/repos/fastNeutrino_v1.0/build/fastNeutrino"

# ruleorder : fit_to_xibeta_fixedtimes > fit_to_xibeta

rule fit_to_xibeta:
    input:
        datafile = "fastNeutrino/input/fn_n-100_xibeta-{alpha}_r-0.0.txt",
        modelfile = "fastNeutrino/models/{model}.txt"
    output:
        "fastNeutrino/fitted_params/n-100_xibeta-{alpha}.{model}FixedTimes.txt"
    shell:
        "{fastNeutrino} --maxB 10 --maxRandomRestarts 1 "
        "--modelFile {input.modelfile} "
        "--inferredModelOutputFile {output} "
        "< {input.datafile} "
        "> fastNeutrino/log/xibeta-{wildcards.alpha}.{wildcards.model}.log"

# rule fit_to_xibeta:
#     input:
#         datafile = "fastNeutrino/input/fn_n-100_xibeta-{alpha}_r-0.0.txt",
#         modelfile = "fastNeutrino/models/{model}.txt"
#     output:
#         "fastNeutrino/fitted_params/n-100_xibeta-{alpha}.{model}.txt"
#     shell:
#         "{fastNeutrino} --maxB 10 --maxRandomRestarts 1000 "
#         "--modelFile {input.modelfile} "
#         "--inferredModelOutputFile {output} "
#         "< {input.datafile} "
#         "> fastNeutrino/log/xibeta-{wildcards.alpha}.{wildcards.model}.log"

# rule fit_to_xibeta_long:
#     input:
#         datafile = "fastNeutrino/input/fn_n-100_xibeta-{alpha}_r-0.0.txt",
#         modelfile = "fastNeutrino/models/{model}.txt"
#     output:
#         "fastNeutrino/fitted_params/n-100_xibeta-{alpha}.{model}.long.txt"
#     shell:
#         "{fastNeutrino} --maxB 10 --maxRandomRestarts 10000 "
#         "--modelFile {input.modelfile} "
#         "--inferredModelOutputFile {output} "
#         "< {input.datafile} "
#         "> fastNeutrino/log/xibeta-{wildcards.alpha}.{wildcards.model}.log"

rule fastNeutrino2msprime_xibeta:
    output:
        "simulations/msprime/jsfs_fastNeutrino-xibeta_n-{n}_alpha-{alpha}_{model}_r-{r}.txt"
    input:
        "fastNeutrino/fitted_params/n-100_xibeta-{alpha}.{model}.txt"
    wildcard_constraints:
        r="\d+\.\d*"
    shell:
        "python src/simulate_joint_sfs.py "
        "$(python src/fastNeutrino2params.py {input}) "
        "--nSamples {wildcards.n} --nLoci 100000 "
        "-r {wildcards.r} "
        "> {output}"



# MODELS = ['2EpochConst',
#             '2EpochExp',
#             '3EpochConstConst',
#             '3EpochConstExp',
#             '3EpochExpConst',
#             '3EpochExpExp',
#             '4EpochConst',
#             '5EpochConst']

# rule fastNeutrino2msprime_xibeta_all:
#     input:
#         expand("simulations/msprime/jsfs_fastNeutrino-xibeta_n-{n}_alpha-{alpha}_{model}_r-{r}.txt",
#                n=100, alpha=ALPHAS[:-1],
#                model=MODELS,
#                r=0.0)
#

ALPHA_NEW = [1.975, 1.95, 1.9, 1.85, 1.8, 1.75, 1.625, 1.5]
R_NEW = [0.0, 0.5, 1.0, 2.5, 5.0]# , 10.0]

rule xibeta_new:
    input:
        expand("simulations/msprime/jsfs_n-{n}_xibeta-{alpha}_r-{r}.txt",
               n=100,
               alpha=ALPHA_NEW,
               r=R_NEW)

rule fastNeutrino_new:
    input:
        expand("fastNeutrino/fitted_params/n-100_xibeta-{alpha}.{model}.txt",
               alpha=ALPHA_NEW,
               model="ConstFixedTimes")

rule fastNeutrino2msprime_xibeta_r:
    input:
        expand("simulations/msprime/jsfs_fastNeutrino-xibeta_n-{n}_alpha-{alpha}_{model}_r-{r}.txt",
               n=100, alpha=ALPHA_NEW,
               model="ConstFixedTimes",
               r=R_NEW)










t2_dict = {'1.975':1.9147040163086877,
            ('1.975','ConstFixedTimes'):0.9857570954110398,
            '1.95':1.8580860017797316,
            ('1.95','ConstFixedTimes'):0.8060548337628121,
            '1.9':1.7936099273119825,
            ('1.9','ConstFixedTimes'):0.7484995401521894,
            '1.85':1.7596684029993237,
            ('1.85','ConstFixedTimes'):0.5916311947466382,
            '1.8':1.7228157901104733,
            ('1.8','ConstFixedTimes'):0.7326115473889974,
            '1.75':1.700555522433559,
            ('1.75','ConstFixedTimes'):0.7036971458515244,
            '1.625':1.6624201582014804,
            ('1.625','ConstFixedTimes'):0.6410797980679432,
            '1.5':1.6373134579807764,
            ('1.5','ConstFixedTimes'):6.279944311189792e-05
}


rule xibeta_coalescent_scaled:
    output:
        "simulations/msprime/jsfs_n-{n}_xibeta-{alpha}_r-{r}.scaled.txt"
    wildcard_constraints:
        r="\d+\.\d*"
    params:
        r_scaled=lambda wildcards: str(float(wildcards.r) / t2_dict[wildcards.alpha])
    shell:
        "python src/simulate_joint_sfs.py --nSamples {wildcards.n} --nLoci 100000 "
        "--xibeta {wildcards.alpha} -r {params.r_scaled} "
        "> {output}"


rule fastNeutrino2msprime_scaled:
    output:
        "simulations/msprime/jsfs_fastNeutrino-xibeta_n-{n}_alpha-{alpha}_{model}_r-{r}.scaled.txt"
    input:
        "fastNeutrino/fitted_params/n-100_xibeta-{alpha}.{model}.txt"
    params:
        r_scaled=lambda wildcards: str(float(wildcards.r) / t2_dict[(wildcards.alpha, wildcards.model)])
    shell:
        "python src/simulate_joint_sfs.py "
        "$(python src/fastNeutrino2params.py {input}) "
        "--nSamples {wildcards.n} --nLoci 100000 "
        "-r {params.r_scaled} "
        "> {output}"

rule everything_scaled:
    input:
        expand("simulations/msprime/jsfs_fastNeutrino-xibeta_n-{n}_alpha-{alpha}_{model}_r-{r}.scaled.txt",
               n=100, alpha=ALPHA_NEW,
               model="ConstFixedTimes",
               r=R_NEW),
        expand("simulations/msprime/jsfs_n-{n}_xibeta-{alpha}_r-{r}.scaled.txt",
               n=100,
               alpha=ALPHA_NEW,
               r=R_NEW)
